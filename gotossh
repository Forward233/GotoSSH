#!/bin/bash

# GOTO SSH - Auto Login SSH Server
#
# @author   MFrank2016
# @link     https://github.com/MFrank2016/GotoSSH
#
# Usage:
# $ chmod a+x gotossh
# $ sudo cp gotossh /usr/local/bin/
# $ 'test_server|192.168.0.1|root|password|22|0'  > ~/.gotossh_config
# $ gotossh   // List Server
# $ gotossh 1 // Login Num n Server
VERSION=2.0
TMP_FILE='$HOME/.gotossh_TMP_FILE'
echo -e "" > ${TMP_FILE}
CONFIG_FILE="$HOME/.gotossh_config"
SETTINGFILE='$HOME/.gotossh_settings'
GOTO_SSH_CONFIG=`cat ~/.gotossh_config`

LINE_BEGIN="\033[1;32m"
LINE_END="${LINE_END}"
BORDER_LINE="${LINE_BEGIN}###################################################################################### ${LINE_END}"
MAXLINELENGTH=`expr "${#BORDER_LINE}"`
I=0;

# ==============定义输出函数============
# 输出首/尾行
echoFullLine(){
    echo -e  ${BORDER_LINE}
}
# 输出间隔行
echoSkipLine(){
    echo -e  "${LINE_BEGIN}#                                  [GOTO SSH]                                        # ${LINE_END}"
}
# 输出服务器信息行
echoServerLine(){
    local linkName=`echo ${1} | awk -F\| '{ print $1 }'`
    local line="${LINE_BEGIN}#"\ [$i]\ ${linkName}
    local currentLineLength=`expr "${#line}"`
    local disLineLength=`expr $MAXLINELENGTH - $currentLineLength - 9`
    echo -e  $line"\c"
    for n in $(seq $disLineLength);
    do
        echo -e  " \c"
    done
    echo -e  "# ${LINE_END}"
}
# 输出选择列表
echoServerList(){
	echoFirstLine
	echo -e  "${LINE_BEGIN}#                                  [GOTO SSH]                                        # ${LINE_END}"
	echoSkipLine
	echoSkipLine

	# 配置文件不存在
	if [ -z "${GOTO_SSH_CONFIG}" ]; then
		echo -e  "${LINE_BEGIN}#                           Config(~/.gotossh_config) Not Found                      # ${LINE_END}"
		echoSkipLine
		echoSkipLine
		echoFullLine
		exit
	fi

	# 循环读取服务器名称
	for serverLine in ${GOTO_SSH_CONFIG}; do
		((I++))
		if [[ "${serverLine}" == *\[Server* ]]; then
			break;
		fi
		echoServerLine ${serverLine}
	done

	echoSkipLine
	echoSkipLine
	echoFullLine
}
# ===========输出函数定义结束===========

# ===========开始处理       ===========
# -l 命令
if [ ${1} = "-l" ]; then
	echoServerList
	exit
fi

# 判断是否直接跳转
if [ ${1} ]; then
    NO=${1}
else
    NO=0
    until [ ${NO} -gt 0 -a ${NO} -le ${I} ] 2>/dev/null
    do
        echo -e  'Server Number:\c'
        read NO
    done
fi

# 读取该服务器配置
SERVER_INFO=`cat ~/.gotossh_config | sed -n "${NO}p"`

# 【插入服务器信息】
# 描述：将服务器登录信息写入临时脚本中
# 参数1：服务器信息
insertSERVER_INFO(){
    local tmpIp=`echo ${1} | awk -F\| '{ print $2 }'`
    local tmpName=`echo ${1} | awk -F\| '{ print $3 }'`
    local tmpPwd=`echo ${1} | awk -F\| '{ print $4 }'`
    local tmpPort=`echo ${1} | awk -F\| '{ print $5 }'`
    local tmpRely=`echo ${1} | awk -F\| '{ print $6 }'`
    echo "spawn ssh -p${tmpPort} -l "$tmpName $tmpIp >> ${TMP_FILE}
    if [ -n "${tmpPwd}"  ]; then
		echo 'expect {
		"	*yes/no" { send "yes\r"; exp_continue }
		"	*password:" { send "${tmpPwd}\r" }
		}' >> ${TMP_FILE}
        echo 'expect "*:~*"' >> ${TMP_FILE}
    fi
}

if [ -n "${SERVER_INFO}" ]; then
    IP=`echo ${SERVER_INFO} | awk -F\| '{ print $2 }'`
    NAME=`echo ${SERVER_INFO} | awk -F\| '{ print $3 }'`
    PWD=`echo ${SERVER_INFO} | awk -F\| '{ print $4 }'`
    port=`echo ${SERVER_INFO} | awk -F\| '{ print $5 }'`
    rely=`echo ${SERVER_INFO} | awk -F\| '{ print $6 }'`
    
    echo '#!/usr/bin/expect -f' > ${TMP_FILE}
    echo 'set timeout 30' >> ${TMP_FILE}
    
    readINIInfo(){
        local section=$1
        local key=$2
        local iniInfo=`awk -F '=' '/\['${section}'\]/{a=1}a==1&&$1~/'${key}'/{print $2;exit}' ${CONFIG_FILE}`
        echo "$iniInfo"
    }
    if [ "${2}" == "scp" -a "${3}" != "" ]; then
        insertSCPInfo(){
            local tmpIp=`echo ${1} | awk -F\| '{ print $2 }'`
            local tmpName=`echo ${1} | awk -F\| '{ print $3 }'`
            local tmpPwd=`echo ${1} | awk -F\| '{ print $4 }'`
            local tmpPort=`echo ${1} | awk -F\| '{ print $5 }'`
            local tmpRely=`echo ${1} | awk -F\| '{ print $6 }'`
            if [ "${4}" != "" ]; then
                echo "spawn scp ${tmpName}@${tmpIp}:${2} ${3}" >> ${TMP_FILE}
            else
                echo "send \"scp ${tmpName}@${tmpIp}:${2} ${3}\r\"" >> ${TMP_FILE}
            fi
            echo 'expect "*password:"' >> ${TMP_FILE}
            echo 'send  "'${tmpPwd}'\r"' >> ${TMP_FILE}
            echo 'expect "*:~*"' >> ${TMP_FILE}
        }
        
        logPath=`readINIInfo "scp" ${3}`
        echo $logPath
        if [ -n "${logPath}" ]; then
            if [ "${rely}" == "0" ]; then
                insertSCPInfo ${SERVER_INFO} ${logPath} "./${logPath##*/}" "0"
            else
                relyServer=`cat ~/.gotossh_config | sed -n  ${rely}'P'`
                insertSERVER_INFO ${relyServer}
                time=`date '+%Y%m%d_%H%M%S'`
                oldPath=${logPath}
                fileName=${logPath##*/}"-"${time}
                insertSCPInfo ${SERVER_INFO} ${oldPath} "~/${fileName}"
                echo "send \"exit\r\"" >> ${TMP_FILE}
                echo 'expect "*:~*"' >> ${TMP_FILE}
                insertSCPInfo ${relyServer} "~/"${fileName} "./"${fileName%-*} "0"
            fi
            chmod a+x ${TMP_FILE}
            ${TMP_FILE}
            echo '' > ${TMP_FILE}
            exit
        else
            echo "log path not found!"
            echo '' > ${TMP_FILE}
            exit
        fi
    fi
    
    if [ "${rely}" != "0" ]; then
        relyServer=`cat ~/.gotossh_config | sed -n  ${rely}'P'`
        insertSERVER_INFO ${relyServer}
        echo "send \"ssh -p${port} -l ${NAME} ${IP}\r\"" >> ${TMP_FILE}
    else
        echo "spawn ssh -p${port} -l "${NAME} ${IP} >> ${TMP_FILE}
    fi
    
    if [ -z "${port}"  ]; then
        port=22
    fi
    
    
    
    if [ -n "${2}" ]; then
        svName="Server${NO}"
        commend=`readINIInfo ${svName} ${2}`
        if [[ $commend == *\|* ]]; then
            commendPwd=`echo ${commend} | awk -F\| '{ print $2 }'`
            commend="${commend%%|*}"
        fi
    fi
    
    
    if [ -n "${PWD}"  ]; then
        echo 'expect "*password:"' >> ${TMP_FILE}
        echo 'send  "'${PWD}'\r"' >> ${TMP_FILE}
        echo 'expect "*:~*"' >> ${TMP_FILE}
        if [ "${2}" == 'sudo' ]; then
            echo 'expect "@"' >> ${TMP_FILE}
            echo 'send   "sudo su\r"' >> ${TMP_FILE}
            echo 'expect "password for"' >> ${TMP_FILE}
            echo 'send  "'${PWD}'\r"' >> ${TMP_FILE}
            echo 'expect "*:~*"' >> ${TMP_FILE}
        fi
        if [ -n "${commend}" ]; then
            echo 'send  "'${commend}'\r"' >> ${TMP_FILE}
        fi
        if [ -n "${commendPwd}" ]; then
            echo 'expect "*password:"' >> ${TMP_FILE}
            echo 'send  "'${commendPwd}'\r"' >> ${TMP_FILE}
        fi
    fi
    
    echo 'interact' >> ${TMP_FILE}
    chmod a+x ${TMP_FILE}
    ${TMP_FILE}
    echo '' > ${TMP_FILE}
fi
